<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://L1n2316490964.github.io/</id>
    <title>Gridea</title>
    <updated>2023-06-16T05:02:14.438Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://L1n2316490964.github.io/"/>
    <link rel="self" href="https://L1n2316490964.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://L1n2316490964.github.io/images/avatar.png</logo>
    <icon>https://L1n2316490964.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Java算法设计]]></title>
        <id>https://L1n2316490964.github.io/post/java-suan-fa-she-ji/</id>
        <link href="https://L1n2316490964.github.io/post/java-suan-fa-she-ji/">
        </link>
        <updated>2023-06-16T04:51:16.000Z</updated>
        <content type="html"><![CDATA[<p>//  Example9_9.java</p>
<p>public class Example9_9 {<br>
public static void main(String args[]) {<br>
WindowDocument win=new WindowDocument();<br>
win.setBounds(100,100,890,460);<br>
win.setTitle(&quot;计算&quot;);<br>
}<br>
}</p>
<p>//  ExpressionEvaluation.java</p>
<p>import java.util.Stack;</p>
<p>public class ExpressionEvaluation {</p>
<pre><code>private static int precedence(char operator) {
    if (operator == '+' || operator == '-') {
        return 1;
    } else if (operator == '*' || operator == '/') {
        return 2;
    } else if (operator == '^') {
        return 3;
    } else {
        return -1;
    }
}

private static double applyOp(char operator, double a, double b) {
    switch(operator) {
        case '+':
            return a + b;
        case '-':
            return a - b;
        case '*':
            return a * b;
        case '/':
            if (b == 0)
                throw new UnsupportedOperationException(&quot;Cannot divide by zero&quot;);
            return a / b;
        case '^':
            return Math.pow(a, b);
    }
    return 0;
}

public static double evaluate(String expression) {
    char[] tokens = expression.toCharArray();

    Stack&lt;Double&gt; values = new Stack&lt;&gt;();
    Stack&lt;Character&gt; operators = new Stack&lt;&gt;();

    for (int i = 0; i &lt; tokens.length; i++) {
        if (tokens[i] == ' ') {
            continue;
        } else if (tokens[i] &gt;= '0' &amp;&amp; tokens[i] &lt;= '9') {
            StringBuilder sb = new StringBuilder();
            while (i &lt; tokens.length &amp;&amp; (tokens[i] &gt;= '0' &amp;&amp; tokens[i] &lt;= '9' || tokens[i] == '.')) {
                sb.append(tokens[i++]);
            }
            values.push(Double.parseDouble(sb.toString()));
            i--;
        } else if (tokens[i] == '(') {
            operators.push(tokens[i]);
        } else if (tokens[i] == ')') {
            while (operators.peek() != '(') {
                double val2 = values.pop();
                double val1 = values.pop();
                char op = operators.pop();

                values.push(applyOp(op, val1, val2));
            }
            operators.pop();
        } else if (tokens[i] == '+' || tokens[i] == '-' || tokens[i] == '*' || tokens[i] == '/' || tokens[i] == '^') {
            while (!operators.empty() &amp;&amp; precedence(tokens[i]) &lt;= precedence(operators.peek())) {
                double val2 = values.pop();
                double val1 = values.pop();
                char op = operators.pop();
                values.push(applyOp(op, val1, val2));
            }
            operators.push(tokens[i]);
        }
    }

    while (!operators.empty()) {
        double val2 = values.pop();
        double val1 = values.pop();
        char op = operators.pop();

        values.push(applyOp(op, val1, val2));
    }

    return values.pop();
}

/*public static void main(String[] args) {
    String expression = &quot;(2+3)/3&quot;;
    System.out.println(evaluate(expression));
}*/
</code></pre>
<p>}</p>
<p>//  HandleListener.java</p>
<p>import java.awt.event.*;<br>
public class HandleListener implements ActionListener {<br>
WindowDocument view;<br>
public void setView(WindowDocument view) {<br>
this.view = view;<br>
}<br>
public void actionPerformed(ActionEvent e) {<br>
String str=e.getActionCommand();<br>
if(str.equals(&quot;表达式求值&quot;))<br>
{<br>
view.textChangeListener.setXuanze(&quot;表达式求值&quot;);<br>
}<br>
else if(str.equals(&quot;堆排序&quot;))<br>
{<br>
view.textChangeListener.setXuanze(&quot;堆排序&quot;);<br>
}<br>
else if(str.equals(&quot;KMP算法进行字符串查找&quot;))<br>
{view.textChangeListener.setXuanze(&quot;KMP算法进行字符串查找&quot;);}</p>
<pre><code>}
</code></pre>
<p>}</p>
<p>//  HeapSort.java</p>
<p>public class HeapSort {</p>
<pre><code>public void sort(int arr[]) {
    int n = arr.length;

    // 构建最大堆
    for (int i = n / 2 - 1; i &gt;= 0; i--)
        heapify(arr, n, i);

    // 逐个提取最大的元素并将其放在数组末尾
    for (int i=n-1; i&gt;=0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        //恢复堆的性质
        heapify(arr, i, 0);
    }
}

// 调整堆
void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2*i + 1;
    int r = 2*i + 2;

    // 如果左侧子节点大于父节点
    if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest])
        largest = l;

    // 如果右侧子节点大于父节点
    if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest])
        largest = r;

    // 如果最大元素不是根节点
    if (largest != i) {
        int swap = arr[i];
        arr[i] = arr[largest];
        arr[largest] = swap;

        // 对子树递归执行堆化操作
        heapify(arr, n, largest);
    }
}

/* 测试代码 */
</code></pre>
<p>/* public static void main(String args[]) {<br>
int arr[] = {12, 11, 13, 5, 6, 7};<br>
int n = arr.length;</p>
<pre><code>    HeapSort ob = new HeapSort();
    ob.sort(arr);

    System.out.println(&quot;排序后的数组:&quot;);
    for (int i=0; i&lt;n; ++i)
        System.out.print(arr[i]+&quot; &quot;);
}*/
</code></pre>
<p>}</p>
<p>//  Kmps.java</p>
<p>public class Kmps {<br>
public static int search(String text, String pattern) {<br>
int[] lps = computeLPSArray(pattern);<br>
int i = 0, j = 0;<br>
int count = 0;<br>
while (i &lt; text.length()) {<br>
if (text.charAt(i) == pattern.charAt(j)) {<br>
i++;<br>
j++;<br>
}<br>
if (j == pattern.length()) {<br>
count++;<br>
j = lps[j - 1];<br>
} else if (i &lt; text.length() &amp;&amp; text.charAt(i) != pattern.charAt(j)) {<br>
if (j != 0) {<br>
j = lps[j - 1];<br>
} else {<br>
i++;<br>
}<br>
}<br>
}<br>
return count;<br>
}</p>
<pre><code>private static int[] computeLPSArray(String pattern) {
    int[] lps = new int[pattern.length()];
    int i = 0, j = 1;
    while (j &lt; pattern.length()) {
        if (pattern.charAt(j) == pattern.charAt(i)) {
            lps[j] = i + 1;
            i++;
            j++;
        } else if (i != 0) {
            i = lps[i - 1];
        } else {
            j++;
        }
    }
    return lps;
}

    /*public static void main(String[] args) {
        String text = &quot;1232345123431236327123&quot;;
        String pattern = &quot;123&quot;;
        int count = search(text, pattern);
        if (count == 0) {
            System.out.println(&quot;Pattern not found in the text&quot;);
        } else {
            System.out.println(&quot;Pattern found &quot; + count + &quot; times in the text&quot;);
        }
    }*/
</code></pre>
<p>}</p>
<p>//  TextListener.java</p>
<p>import javax.swing.event.DocumentListener;<br>
import javax.swing.event.DocumentEvent;<br>
import java.util.Arrays;</p>
<p>public class TextListener implements DocumentListener {<br>
WindowDocument view;<br>
public String xuanze;<br>
int x;<br>
public void setXuanze(String xuanze){<br>
this.xuanze=xuanze;<br>
if(xuanze.equals(&quot;表达式求值&quot;)){<br>
x=1;<br>
} else if(xuanze.equals(&quot;堆排序&quot;))<br>
{<br>
x=2;<br>
}else if(xuanze.equals(&quot;KMP算法进行字符串查找&quot;)){<br>
x=3;<br>
}<br>
}<br>
public void setView(WindowDocument view) {<br>
this.view = view;</p>
<pre><code>}

public void changedUpdate(DocumentEvent e) {
    if(x==1)
    {
        String str1 = view.inputText.getText();
        ExpressionEvaluation ep=new ExpressionEvaluation();
        view.showText.setText(null);
        view.showText.append(&quot;表达式的值为: &quot; + ep.evaluate(str1));
    }else if(x==2) {
        String str = view.inputText.getText();
        //空格

        String regex = &quot;[\\s]+&quot;;
        String words[] = str.split(regex);

        int num[] = new int[words.length];
        for (int i = 0; i &lt; words.length; i++)
            num[i] = Integer.parseInt(words[i]);//

           /* for (int i = 0; i &lt; words.length - 1; i++) {
                for (int j = 0; j &lt; words.length - 1 - i; j++) {
                    if (num[j] &lt; num[j + 1]) {
                        int x = num[j];
                        num[j] = num[j + 1];
                        num[j + 1] = x;
                    }
                }
            }*/
        // Arrays.sort(num);      //按字典序从小到大排序

        HeapSort ob = new HeapSort();
        ob.sort(num);
        String words2[] = new String[words.length];
        for (int i = 0; i &lt; words.length; i++)
            words2[i] = String.valueOf(num[i]);
        view.showText.setText(null);
        for (int i = 0; i &lt; words.length; i++)
            view.showText.append(words2[i] + &quot;,&quot;);
    }else if(x==3)
    {
        String str3 = view.inputText.getText();
        //空格

        String regex = &quot;[\\s]+&quot;;
        String words3[] = str3.split(regex);
        String text = words3[0];
        String pattern = words3[1];
        Kmps k=new Kmps();
        int count = k.search(text, pattern);
        if (count == 0) {
            view.showText.append(&quot;没找到&quot;);

        } else {
            view.showText.append(&quot;找到了 &quot; + count +  &quot;次&quot;);

        }
    }
}
public void removeUpdate(DocumentEvent e) {
    changedUpdate(e);
}
public void insertUpdate(DocumentEvent e) {
    changedUpdate(e);
}
</code></pre>
<p>}</p>
<p>//  WindowDocument.java</p>
<p>import java.awt.<em>;<br>
import javax.swing.</em>;<br>
import javax.swing.text.Document;<br>
public class WindowDocument extends JFrame {<br>
/**<br>
*<br>
*/<br>
private static final long serialVersionUID = -4158929136133563216L;<br>
JTextArea inputText,showText; //文本输入区，文本展示区<br>
JMenuBar menubar;//菜单条<br>
JMenu menu;//菜单项<br>
JMenuItem  item1,item2,item3;//菜单<br>
TextListener textChangeListener;  //inputText的监视器<br>
HandleListener handleListener;  //itemCopy,itemCut,itemPaste的监视器<br>
WindowDocument() {<br>
init();<br>
setLayout(new FlowLayout());</p>
<pre><code>    setVisible(true);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
void init() {
    inputText = new JTextArea(10,28);
    showText = new JTextArea(10,28);
    showText.setLineWrap(true);       //文本自动回行
    showText.setWrapStyleWord(true);  //文本区以单词为界自动换行
    Font font = new Font(&quot;宋体&quot;,Font.PLAIN,25);
    inputText.setFont(font);
    showText.setFont(font);
    menubar=new JMenuBar();
    menu=new JMenu(&quot;选择&quot;);
    item1=new JMenuItem(&quot;表达式求值&quot;);
    item2=new JMenuItem(&quot;堆排序&quot;);
    item3=new JMenuItem(&quot;KMP算法进行字符串查找&quot;);

    item1.setActionCommand(&quot;表达式求值&quot;);
    item2.setActionCommand(&quot;堆排序&quot;);
    item3.setActionCommand(&quot;KMP算法进行字符串查找&quot;);
    menu.setFont(font);

    menu.add(item1);
    menu.add(item2);
    menu.add(item3);
    menubar.add(menu);
    setJMenuBar(menubar);
    add(new JScrollPane(inputText));
    add(new JScrollPane(showText));
    textChangeListener = new TextListener();//监视器
    handleListener = new HandleListener(); //监视器
    textChangeListener.setView(this);
    handleListener.setView(this);
    Document document =inputText.getDocument();//获取输入区的文档，放入Document中
    document.addDocumentListener(textChangeListener);//向文档注册监视器
    item1.addActionListener(handleListener);  //向菜单项注册监视器
    item2.addActionListener(handleListener);
    item3.addActionListener(handleListener);
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://L1n2316490964.github.io/post/hello-gridea/</id>
        <link href="https://L1n2316490964.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>